#!/usr/bin/python
__doc__ = 'EXTRACT-QS -- extract quantiles'
__usage__ = 'extract-qs xname path/to/post_samples.csv [-o path/to/plot.png ...]'
__author__ = 'pgjlandry@gmail.com'
__date__ = '08-2020'

# LOAD PACKAGES

from optparse import OptionParser
import numpy as np
import numpy.random
import scipy.stats
from scipy.stats import gaussian_kde

# SET UP OPTIONS

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-q', '--quantiles', default="0.05,0.5,0.95", help='quantiles to return, DEFAULT="0.05,0.5,0.95"', metavar='Q1,Q2,...')
parser.add_option('-n', '--numeos', default=False, help='number of EOS samples to use, DEFAULT=ALL', metavar='NUM_EOS_SAMPLES')
parser.add_option('-o', '--outpath', default="quantiles.csv", help='path to output plot, DEFAULT="quantiles.csv"', metavar='OUT_PATH')
parser.add_option('-w', '--weightcol', default="logweight", help='name of logweight column in eos posterior samples, DEFAULT="logweight"', metavar='WEIGHT_COL')
parser.add_option('-s', '--skipbhs', default=False, help='skip BH samples, if true give "prop,M", DEFAULT=False', metavar='False')
parser.add_option('-t', '--qtype', default="sym", help='symmetric (sym) or HPD (hpd) quantiles, DEFAULT="sym"', metavar='Q_TYPE')
parser.add_option('-b', '--numbins', default=False, help='number of bins to use for histogram-based HPD interval calculator, DEFAULT=AUTO', metavar='NUM_BINS')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

# SAVE INPUT FROM OPTIONS

opts, args = parser.parse_args()
xname = str(args[0])
path_to_post = str(args[1])
num_eoss = int(opts.numeos)
path_to_output = str(opts.outpath)
wcol = str(opts.weightcol)
qtype = str(opts.qtype)
numbins = int(opts.numbins)
qs = [float(q) for q in str(opts.quantiles).split(',')]
if opts.skipbhs: skipbhs, M = str(opts.skipbhs).split(',')
verb = opts.verbose

bh_dict = {"R":lambda M: 2*M,"Lambda":lambda M: 0*M,"pressurec2":lambda M:0*M,"baryon_density":lambda M: 0*M,"energy_densityc2":lambda M: 0*M}

# LOAD DATA

if verb: print "loading data..."

post = np.genfromtxt(path_to_post,dtype=None,delimiter=",",names=True) # read eos posterior process
cols = list(post.dtype.names)[2:]

if verb: print "calculating..."

q_dat = np.empty((len(cols),len(qs)+1))
for i in range(len(cols)):
	q_dat[i,0] = cols[i] 

for i,prop in enumerate(cols):

	samples = post[prop]
	logweights = post[wcol]
	if num_eoss:
		samples = samples[:num_eoss]
		logweights = logweights[:num_eoss]
	if opts.skipbhs:
		ns_samples = []
		ns_weights = []
		for samp, logweight in zip(samples,logweights):
			if samp != bh_dict[skipbhs](float(prop)): #FIXME: watch out for header corruption
				ns_samples.append(samp)
				ns_weights.append(logweight)
		samples = ns_samples
		logweights = ns_weights

	weights = np.exp(logweights)
	weights = weights/np.sum(weights)

	samples_eqwt = np.random.choice(samples,size=int(1e6),p=weights)

# SYMMETRIC CREDIBLE INTERVALS

	if qtype != "hpd":

		quants = [np.percentile(samples_eqwt,100*q) for q in qs]

		for j in range(len(quants)):
			q_dat[i,j+1] = quants[j]

#		quants_str = ['{0:.8e}'.format(quant) for quant in quants]
#		quants_str = ','.join(quants_str)

#		print(quants_str)

# HIGHEST POSTERIOR DENSITY INTERVALS

	else:

		def hpd_sample(dat,cl,num_bins=False):
	
			dat = [datum for datum in dat if datum == datum]
	    		norm = len(dat)
			if not num_bins: num_bins = int(np.sqrt(norm))
	    		dat = np.array(dat)
			hist, bin_edges = np.histogram(dat,bins=num_bins)
	    		bins = [(bin_edges[i],bin_edges[i+1]) for i in range(len(bin_edges)-1)]
	    		hist_dat = zip(hist,bins)
	    		hist_dat.sort(reverse=True)
	    		hist, bins = zip(*hist_dat)
	    		hist = list(hist)
	    		bins = list(bins)

		    	for i in range(len(bins)):
				subdat = []
				for j in range(i+1):
			    		bin = bins[j]
			    		subdat.extend(dat[(dat >= bin[0]) & (dat < bin[1])])
				prob = float(len(list(subdat)))/norm
				if i == 0: maxap = 0.5*(min(subdat)+max(subdat))
				if prob >= cl: break

		    	lb, ub = min(subdat), max(subdat)

		    	return lb, maxap, ub

		quants = [hpd_sample(samples_eqwt,q,numbins) for q in qs]

		for j in range(len(quants)):
			q_dat[i,j+1] = quants[j]

	#	quants_str = ['{0:.8e}'.format(quant) for quant in quants]
	#	quants_str = ','.join(quants_str)

	#	print(quants_str)

# SAVE DATA

head = xname+','+','.join(['{0:.2f}'.format(q) for q in qs])
np.savetxt(path_to_output,q_dat,'%.8e',delimiter=',',header=head,comments='')

if verb: print "done"
