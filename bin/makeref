#!/usr/bin/python
__doc__ = 'MAKEREF -- sample binaries and get corresponding stellar properties for reference curve on kde-corner-samples'
__usage__ = 'makeref msamps [-v] [-m 1.25,1.75,1.00,1.50] [-M 1.186] [-d ./dat/] [-o ./dat/]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '04-2019'

import numpy as np
from optparse import OptionParser
from nsstruc.constants import *
from nsstruc.macro import macro as getmacro
import glob

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-m', '--massrng', default='1.25,1.75,1.00,1.50', help='comma-separated list of m1 and m2 ranges to draw masses from, DEFAULT=1.25,1.75,1.00,1.50', metavar='1.25,1.75,1.00,1.50')
parser.add_option('-M', '--Mc', default='1.186', help='chirp mass, DEFAULT=1.186', metavar='1.186')
parser.add_option('-d', '--dir', default='./dat/', help='path to directory housing NS properties data, DEFAULT=./dat/', metavar='./dat/')
parser.add_option('-o', '--outdir', default='./dat/', help='path to output directory, DEFAULT=./dat/', metavar='./dat/')
parser.add_option('-t', '--tag', default='REF-', help='tag for output data file, DEFAULT=REF-', metavar='REF-')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
num = int(float(args[0]))
mrng = str(opts.massrng).split(',')
mrng = [float(m) for m in mrng]
mc = float(opts.Mc)
indir = str(opts.dir)
outdir = str(opts.outdir)
tag = str(opts.tag)
verb = opts.verbose

# ASSOCIATE RANDOM BINARIES WITH EACH EOS AND SAVE CORRESPONDING PROPERTIES

eoslist = glob.glob(outdir+"/macro*.csv")
for eos in eoslist:
	
	if verb == True: print 'Read properties of '+str(eos)+' stars'
	
	shortname = (eos.split('macro-')[-1]).split('.')[0]
	outfile = open(outdir+"/"+tag+shortname+".csv","w")
	macrodat = np.genfromtxt(eos,names=True,delimiter=',')
	props = list(macrodat.dtype.names)
	props.remove('M')
		
	mmin = getmacro(eos,'M=min')[0]
	mmax = getmacro(eos,'M=max')[0]
	
	qmin = mrng[0]/mrng[-1]
	qmax = min(mrng[1]/mrng[-2],1.)
	
	qs = np.linspace(qmin,qmax,num)

	if verb == True: print 'Associate '+str(num)+' different binaries with the EoS'

	for i in range(num):
		
		if i==0:
			outfile.write(('EoS,branch2,branch1,m2_source,'+'2,'.join(props)+'2,m1_source,'+'1,'.join(props)+'1,Mmax\n').replace('Lambda', 'lambda'))
		
		q = qs[i]
		m1 = mc*((1.+q)/q**3)**(1./5.)
		m2 = mc*(q**2*(1.+q))**(1./5.)
		
		m2props = getmacro(eos,'M='+str(m2))
		m1props = getmacro(eos,'M='+str(m1))
			
		sampprops = np.array([m2props, m1props]).flatten()
		sampprops = [str(float(sampprop)) for sampprop in sampprops]
		
		outfile.write(eos+','+str(0)+','+str(0)+','+','.join(sampprops)+','+str(mmax)+'\n')				
