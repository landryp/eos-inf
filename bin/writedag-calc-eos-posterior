#!/bin/bash

# input

repodir=$1
rundir=$2
obslist=$3
eosbank=$4
numeos=$5
nummass=$6

# output

dagfile="${rundir}/calc-eos-posterior.dag"
logfile="${rundir}/calc-eos-posterior.in"
echo $repodir > $logfile
echo $rundir >> $logfile
echo $obslist >> $logfile
echo $eosbank >> $logfile
echo $numeos >> $logfile
echo $nummass >> $logfile

# write sub files

execs=( "sample-priors" "convert-json-csv" "recombine-priors" "weigh-samples" "recombine-samples" "marginalize-samples" )
args=( "\"\$(eosbank) \$(priorpath) \$(obstype) \$(numeos) \$(nummass) \$(mbounds) \$(chunkdat)\"" "\"\$(priorpath) \$(priorcsvpath)\"" "\"\$(priorcsvpath) \$(numeos) \$(nummass) \$(chunksize)\"" "\"\$(likepath) \$(priorcsvpath) \$(postpath) '\$(props)' \$(bw)\"" "\"\$(priorcsvpath) \$(postpath) \$(nummass) \$(chunksize)\"" "\"\$(postpath) \$(eospath)\"" )

for i in $(seq 0 $((${#execs[@]}-1)))
do
	execfile=${execs[$i]}
	subfile="${rundir}/${execfile}.sub"
	arg=${args[$i]}

	echo "universe = vanilla" > $subfile
	echo "executable = $repodir/bin/$execfile.sh" >> $subfile
	echo "arguments = $arg" >> $subfile
	echo "output = $rundir/$execfile.out" >> $subfile
	echo "error = $rundir/$execfile.err" >> $subfile
	echo "log = $rundir/$execfile.log" >> $subfile
	echo "getenv = True" >> $subfile
	echo "accounting_group = ligo.dev.o3.cbc.pe.lalinference" >> $subfile
	echo "accounting_group_user = philippe.landry" >> $subfile
	echo "queue 1" >> $subfile
done

# write dag file

echo "# calc-eos-prior.dag, deploying to $rundir" > $dagfile

job=0
while IFS=, read -r likepath obstype
do

	likemetapath="${likepath%.*}.in"
	bwpath="${likepath%.*}.bw"
	priorpath="${likepath%.*}_prior.json"
	priorcsvpath="${priorpath%.*}.csv"
	postpath="${likepath%.*}_post.csv"
	eospath="${likepath%.*}_eos.csv"

#	parse-likelihood-samples $obstype $likepath $likemetapath

	sumbw=0
	vars=0
	while IFS=, read -r prop lb ub bw
	do		
		if [ "$obstype" == "cbc" ]; then
			if [ "$prop" == "m1" ]; then
				gub=$ub
			elif [ "$prop" == "m2" ]; then
				llb=$lb
			fi
			if [ "$prop" == "m1" ] || [ "$prop" == "m2" ] || [ "$prop" == "Lambda1" ] || [ "$prop" == "Lambda2" ]; then
				sumbw=$(bc <<<"scale=4;$sumbw+$bw")
				vars=$(($vars+1))
			fi
		else
			if [ "$prop" == "m" ]; then
				gub=$ub
				llb=$lb
				sumbw=$(bc <<<"scale=4;$sumbw+$bw")
				vars=$(($vars+1))
			fi
			if [ "$obstype" == "xmr" ] && [ "$prop" == "R" ]; then
				sumbw=$(bc <<<"scale=4;$sumbw+$bw")
				vars=$(($vars+1))
			fi
		fi
	done < $likemetapath

	mbounds="$llb,$gub"
	avgbw=$(bc <<<"scale=4;$sumbw/$vars")

	optbw=$(head -n 1 $bwpath)

	chunksize=10000
	chunks=$(($numeos/$chunksize))
	leftover=$(($numeos%$chunksize))
	if [ "$chunks" -eq "0" ]; then
		chunks=1
		chunksize=$leftover
	fi

	parent=$job

	for i in $(seq 0 $(($chunks-1)))
	do
		suffix=$(printf "%06d" $i)
		chunkdat="$i,$chunksize"

		echo "JOB $job $rundir/sample-priors.sub" >> $dagfile
		echo "VARS $job eosbank=\"$eosbank\" priorpath=\"$priorpath$suffix\" obstype=\"$obstype\" numeos=\"$numeos\" nummass=\"$nummass\" mbounds=\"$mbounds\" chunkdat=\"$chunkdat\"" >> $dagfile # FIXME: enable other priors
		echo "RETRY $job 1" >> $dagfile 

		job=$(($job+1))

		echo "JOB $job $rundir/convert-json-csv.sub" >> $dagfile
		echo "VARS $job priorpath=\"$priorpath$suffix\" priorcsvpath=\"$priorcsvpath$suffix\"" >> $dagfile
		echo "RETRY $job 1" >> $dagfile 
		echo "PARENT $(($job-1)) CHILD $job" >> $dagfile

		randseed=$(($randseed+1))	
		job=$(($job+1))
	done

	echo "JOB $job $rundir/recombine-priors.sub" >> $dagfile
	echo "VARS $job priorcsvpath=\"$priorcsvpath\" numeos=\"$numeos\" nummass=\"$nummass\" chunksize=\"$chunksize\"" >> $dagfile
	echo "RETRY $job 1" >> $dagfile
	for i in $(seq 0 $(($chunks-1)))
	do
		echo "PARENT $((2*$i+1+$parent)) CHILD $job" >> $dagfile
	done

	job=$(($job+1))

	if [ "$obstype" == "cbc" ]; then
		props="m1 m2 Lambda1 Lambda2"
		avgbw=$(bc <<<"scale=4;$avgbw/100")
	elif [ "$obstype" == "xmr" ]; then
		props="m R"
	else
		props="m"
	fi

	parent=$(($job-1))

	chunksize=100
	chunks=$(($numeos/$chunksize))

	for i in $(seq 0 $chunks)
	do
		suffix=$(printf "%06d" $i)

		echo "JOB $job $rundir/weigh-samples.sub" >> $dagfile
		echo "VARS $job likepath=\"$likepath\" priorcsvpath=\"$priorcsvpath$suffix\" postpath=\"$postpath$suffix\" props=\"$props\" bw=\"$optbw\"" >> $dagfile
		echo "RETRY $job 1" >> $dagfile 
		echo "PARENT $parent CHILD $job" >> $dagfile

		job=$(($job+1))

	done

	echo "JOB $job $rundir/recombine-samples.sub" >> $dagfile
	echo "VARS $job priorcsvpath=\"$priorcsvpath\" postpath=\"$postpath\" nummass=\"$nummass\" chunksize=\"$chunksize\"" >> $dagfile
	echo "RETRY $job 1" >> $dagfile
	for i in $(seq 1 $(($chunks+1)))
	do
		echo "PARENT $(($parent+$i)) CHILD $job" >> $dagfile
	done

	job=$(($job+1))

	echo "JOB $job $rundir/marginalize-samples.sub" >> $dagfile
	echo "VARS $job postpath=\"$postpath\" eospath=\"$eospath\"" >> $dagfile
	echo "RETRY $job 1" >> $dagfile 
	echo "PARENT $(($job-1)) CHILD $job" >> $dagfile	

	job=$(($job+1))

done < $obslist

while [ ! -f "$dagfile" ]
do
	sleep 10s
done

condor_submit_dag -maxjobs 200 $dagfile
