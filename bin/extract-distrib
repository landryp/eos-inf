#!/usr/bin/python
__doc__ = 'EXTRACT-DISTRIB -- extract distributions from process and save as csv'
__usage__ = 'extract-process prop path/to/eos_post.csv [-o path/to/output.csv ...]'
__author__ = 'pgjlandry@gmail.com'
__date__ = '08-2020'

# LOAD PACKAGES

from optparse import OptionParser
import numpy as np
import numpy.random
import os
import scipy.interpolate
from scipy.interpolate import interp1d

# SET UP OPTIONS

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numeos', default=False, help='number of EOS samples to use, DEFAULT=ALL', metavar='NUM_EOS_SAMPLES')
parser.add_option('-m', '--nummasses', default=100, help='number of mass samples to use, DEFAULT=100', metavar='NUM_MASS_SAMPLES')
parser.add_option('-r', '--mrange', default=[1.,3.], help='mass range to sample in, DEFAULT=[1.,3.]', metavar='MASS_RANGE')
parser.add_option('-u', '--userho', action='store_true', default=False, help='use densities instead of masses as input, DEFAULT=False', metavar='False')
parser.add_option('-e', '--eosdir', default="./", help='path to EOS directory, DEFAULT="./"', metavar='EOS_DIR_PATH')
parser.add_option('-o', '--outpath', default="./samples.csv", help='path to output csv, DEFAULT="./samples.csv"', metavar='OUT_PATH')
parser.add_option('-f', '--fmtstr', default="%.2e", help='output format string, DEFAULT="%.2e"', metavar='FMT_STR')
parser.add_option('-w', '--weightcol', default="logweight", help='name of logweight column in eos posterior samples, DEFAULT="logweight"', metavar='WEIGHT_COL')
parser.add_option('-c', '--eoscol', default="eos", help='name of eos column in eos posterior samples, DEFAULT="eos"', metavar='EOS_COL')
parser.add_option('-b', '--branch', default="random", help='method (random,first,max,min) used to pick stellar sequence, if mass is stable on more than one, DEFAULT="random"', metavar='METHOD_STR')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

# SAVE INPUT FROM OPTIONS

opts, args = parser.parse_args()
prop = str(args[0])
path_to_eos_post = str(args[1])
num_eoss = int(opts.numeos)
num_masses = int(opts.nummasses)
minm, maxm = opts.mrange
eos_dir = str(opts.eosdir)
branch_method = str(opts.branch)
path_to_output = str(opts.outpath)
fmt_str = str(opts.fmtstr)
wcol = str(opts.weightcol)
eoscol = str(opts.eoscol)
use_rho = opts.userho
verb = opts.verbose

# SET UP PATH FINDERS

def eos_path(id):
    
    mod = 1000
    path = eos_dir+"DRAWmod"+str(mod)+"-"+"%06d/eos-draw-%06d.csv" % (id/mod,id)
    
    return path

def macro_path(id,branch=0):
    
    mod = 1000
    path = eos_dir+"DRAWmod"+str(mod)+"-"+"%06d/MACROdraw-%06d/MACROdraw-%06d-%d.csv" % (id/mod,id,id,branch)
    
    return path

branch_dict = {"random":np.random.choice,"first":lambda l: l[0],"max":np.max,"min":np.min}

bh_dict = {"R":lambda M: 2*M,"Lambda":lambda M: 0*M}

# LOAD DATA

if verb: print "loading data..."

eos_post = np.genfromtxt(path_to_eos_post,dtype=None,delimiter=",",names=True) # read eos posterior process
eoss = eos_post[eoscol]
logweights = eos_post[wcol]
if num_eoss:
	eoss = eoss[:num_eoss]
	logweights = logweights[:num_eoss]
else: num_eoss = len(eoss)
mgrid = np.linspace(minm,maxm,num_masses)

sample_array = np.empty((num_eoss,num_masses+2))

if verb: print "extracting samples..."

for i, (eos, logweight) in enumerate(zip(eoss,logweights)):

	init_val = -1
	branch_vals = []
	branch_interps = []
	branch = 0
	macropath = macro_path(eos)
	eospath = eos_path(eos)
	while os.path.isfile(macropath):
	
		if use_rho:
		
			eos_dat = np.genfromtxt(eospath, dtype=None, delimiter=",", names=True)
			rhos = eos_dat["baryon_density"]
			vals = eos_dat[prop]	
			val_of_m = interp1d(rhos, vals, bounds_error=False, fill_value=0)
		
		else:
	
			macro_dat = np.genfromtxt(macropath, dtype=None, delimiter=",", names=True)
			masses = macro_dat["M"]
			rhocs = macro_dat["rhoc"]
		
			if prop == 'pressurec2' or prop == 'energy_densityc2' or prop == 'baryon_density':
				eos_dat = np.genfromtxt(eospath, dtype=None, delimiter=",", names=True)
				vals = eos_dat[prop]
				rhoc_of_m = interp1d(masses, rhocs, bounds_error=False, fill_value=0)
				val_of_rhoc = interp1d(rhocs, vals, bounds_error=False, fill_value=0)
				val_of_m = lambda M: val_of_rhoc(rhoc_of_m(M))
		
			else:
				vals = macro_dat[prop]		
				val_of_m = interp1d(masses, vals, bounds_error=False, fill_value=0)
		
		branch_interps.append(val_of_m)

		branch += 1
		macropath = macro_path(eos,branch)

	for j, m in enumerate(mgrid):
	
		for val_of_m in branch_interps:
		
			tmp_val = float(val_of_m(m))
		
			if tmp_val > init_val:
		
				branch_vals.append(tmp_val)
	
		if branch_vals:
		
			branch_vals = [item for item in branch_vals if item != 0]
	
			if branch_vals:
			
				val = branch_dict[branch_method](branch_vals)
				
			else: val = bh_dict[prop](m)
			
		else: val = init_val
			
		sample_array[i,j+2] = val
		
	sample_array[i,0] = eos
	sample_array[i,1] = logweight
		
# SAVE OUTPUT

if verb: print "saving samples..."

mgrid_str = ['%.2f' % mass for mass in mgrid]
head = 'eos,logweights,'+','.join(mgrid_str)

np.savetxt(path_to_output,sample_array,fmt_str,delimiter=',',header=head)

if verb: print "done"
