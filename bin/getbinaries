#!/usr/bin/python
__doc__ = 'GETBINARIES -- sample binaries and get corresponding stellar properties'
__usage__ = 'getbinaries msamps [-v] [-m 1.25,1.75,1.00,1.50] [-M 1.184,1.188] [-d ./dat/] [-o ./dat/]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '04-2019'

import numpy as np
from optparse import OptionParser
from eosinf.drawmass import drawmass
from nsstruc.constants import *
from nsstruc.macro import macro as getmacro
import glob

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-m', '--massrng', default='1.25,1.75,1.00,1.50', help='comma-separated list of m1 and m2 ranges to draw masses from, DEFAULT=1.25,1.75,1.00,1.50', metavar='1.25,1.75,1.00,1.50')
parser.add_option('-M', '--Mccut', default='0.,1e10', help='chirp mass cut-off range, DEFAULT=None', metavar='1.184,1.188')
parser.add_option('-d', '--dir', default='./dat/', help='path to directory housing NS properties data, DEFAULT=./dat/', metavar='./dat/')
parser.add_option('-o', '--outdir', default='./dat/', help='path to output directory, DEFAULT=./dat/', metavar='./dat/')
parser.add_option('-t', '--tag', default='SAMP', help='tag for output data file, DEFAULT=SAMP', metavar='SAMP')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
num = int(float(args[0]))
mrng = str(opts.massrng).split(',')
mrng = [float(m) for m in mrng]
mcrng = str(opts.Mccut).split(',')
mcrng = [float(mc) for mc in mcrng]
indir = str(opts.dir)
outdir = str(opts.outdir)
tag = str(opts.tag)
verb = opts.verbose

# ASSOCIATE RANDOM BINARIES WITH EACH EOS AND SAVE CORRESPONDING PROPERTIES

dirslist = glob.glob(outdir+"DRAW*")
for dirs in dirslist:

	eoslist = glob.glob(dirs+"/MACRO*")
	for eos in eoslist:
	
		if verb == True: print 'Read properties of '+str(eos)+' stars'
	
		macros = glob.glob(eos+"/MACRO*.csv")
		if len(macros) > 0:
		
			shortname = eos.split('MACRO')[-1]
			outfile = open(eos+"/"+tag+shortname+".csv","w")
			macrodat = np.genfromtxt(macros[0],names=True,delimiter=',')
			props = list(macrodat.dtype.names)
			props.remove('M')
		
			macromins = []
			macromaxs = []
			for macro in macros:
		
				macromins.append(getmacro(macro,'M=min')[0])
				macromaxs.append(getmacro(macro,'M=max')[0])

			mmax = np.max(macromaxs)

			if verb == True: print 'Associate '+str(num)+' different binaries with the EoS'

			for i in range(num):
		
				if i==0:
			
					outfile.write('EoS,branch2,branch1,M2,'+'2,'.join(props)+'2,M1,'+'1,'.join(props)+'1,Mmax\n')
	
				m1, m2 = drawmass(mrng,mcrng)
			
				branches1 = []
				branches2 = []
				for j in range(len(macros)):
			
					if m2 > macromins[j] and m2 < macromaxs[j]:
				
						branches2.append(macros[j])
					
					if m1 > macromins[j] and m1 < macromaxs[j]:
				
						branches1.append(macros[j])
			
				if len(branches2) > 0:
				
					if verb == True: print 'Binary '+str(i)+' m2 is stable'
			
					branchnum2 = np.random.randint(len(branches2))
					branch2 = branches2[branchnum2]
					m2props = getmacro(branch2,'M='+str(m2))
			
				else:
			
					if verb == True: print 'Binary '+str(i)+' m2 is a black hole'
			
					branchnum2 = 'BH'
					m2props = {'M': m2,'rhoc': 0.,'R': 1e-5*2.*G*m2*Msun/c**2,'Lambda': 0.,'I': 1e-45*m2*Msun*(2.*G*m2*Msun/c**2)**2,'Mb': m2}
					m2propstmp = [m2] + [m2props[prop] for prop in props]
					m2props = m2propstmp
				
				if len(branches1) > 0:
				
					if verb == True: print 'Binary '+str(i)+' m1 is stable'
			
					branchnum1 = np.random.randint(len(branches1))
					branch1 = branches1[branchnum1]
					m1props = getmacro(branch1,'M='+str(m1))
			
				else:
				
					if verb == True: print 'Binary '+str(i)+' m1 is a black hole'
			
					branchnum1 = 'BH'
					m1props = {'M': m1,'rhoc': 0.,'R': 1e-5*2.*G*m1*Msun/c**2,'Lambda': 0.,'I': 1e-45*m1*Msun*(2.*G*m1*Msun/c**2)**2,'Mb': m1}
					m1propstmp = [m1] + [m1props[prop] for prop in props]
					m1props = m1propstmp
						
				sampprops = np.array([m2props, m1props]).flatten()
				sampprops = [str(float(sampprop)) for sampprop in sampprops]
		
				outfile.write(eos+','+str(branchnum2)+','+str(branchnum1)+','+','.join(sampprops)+','+str(mmax)+'\n')				
